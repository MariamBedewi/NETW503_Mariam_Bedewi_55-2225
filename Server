import socket
import threading

# Store client information in a dictionary
clients = {}
#key=Client address
#Value=Client socket objects 

def threaded(client_socket, address):
    print("[NEW CONNECTION] " + str(address) + " connected.")
    #as long as the client is connected
    while True:
        
            #read the data up to 1024 bytes
            data = client_socket.recv(1024)
            if not data:
                print(f"Connection with {address} closed.")
                #Delete the information of client
                del clients[address]
                client_socket.close()
                break

            message = data.decode()
            print(f"Received from {address}: {message}")

            if "CLOSE SOCKET" in message:
                print(f"Closing connection with {address}.")
                del clients[address]
                client_socket.close()
                break

            response = message.upper()
            client_socket.send(response.encode())

        

def main():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(("127.0.0.1", 5605))
    server.listen(5)

    print("Server listening on port 5605...")
    #Continuously accept incoming client connection
    while True:
        client_socket, client_address = server.accept()
        print(f"Accepted connection from {client_address}")
        clients[client_address] = client_socket

        new_thread = threading.Thread(target=threaded, args=(client_socket, client_address))
        new_thread.start()

if __name__ == "__main__":
    main()
